"""
This type stub file was generated by pyright.
"""

import plotly.graph_objs as go

_wide_mode_xy_append = ...
_cartesian_append_dict = ...
def scatter(data_frame=..., x=..., y=..., color=..., symbol=..., size=..., hover_name=..., hover_data=..., custom_data=..., text=..., facet_row=..., facet_col=..., facet_col_wrap=..., facet_row_spacing=..., facet_col_spacing=..., error_x=..., error_x_minus=..., error_y=..., error_y_minus=..., animation_frame=..., animation_group=..., category_orders=..., labels=..., orientation=..., color_discrete_sequence=..., color_discrete_map=..., color_continuous_scale=..., range_color=..., color_continuous_midpoint=..., symbol_sequence=..., symbol_map=..., opacity=..., size_max=..., marginal_x=..., marginal_y=..., trendline=..., trendline_options=..., trendline_color_override=..., trendline_scope=..., log_x=..., log_y=..., range_x=..., range_y=..., render_mode=..., title=..., template=..., width=..., height=...) -> go.Figure:
    """
    In a scatter plot, each row of `data_frame` is represented by a symbol
    mark in 2D space.
    """
    ...

def density_contour(data_frame=..., x=..., y=..., z=..., color=..., facet_row=..., facet_col=..., facet_col_wrap=..., facet_row_spacing=..., facet_col_spacing=..., hover_name=..., hover_data=..., animation_frame=..., animation_group=..., category_orders=..., labels=..., orientation=..., color_discrete_sequence=..., color_discrete_map=..., marginal_x=..., marginal_y=..., trendline=..., trendline_options=..., trendline_color_override=..., trendline_scope=..., log_x=..., log_y=..., range_x=..., range_y=..., histfunc=..., histnorm=..., nbinsx=..., nbinsy=..., text_auto=..., title=..., template=..., width=..., height=...) -> go.Figure:
    """
    In a density contour plot, rows of `data_frame` are grouped together
    into contour marks to visualize the 2D distribution of an aggregate
    function `histfunc` (e.g. the count or sum) of the value `z`.
    """
    ...

def density_heatmap(data_frame=..., x=..., y=..., z=..., facet_row=..., facet_col=..., facet_col_wrap=..., facet_row_spacing=..., facet_col_spacing=..., hover_name=..., hover_data=..., animation_frame=..., animation_group=..., category_orders=..., labels=..., orientation=..., color_continuous_scale=..., range_color=..., color_continuous_midpoint=..., marginal_x=..., marginal_y=..., opacity=..., log_x=..., log_y=..., range_x=..., range_y=..., histfunc=..., histnorm=..., nbinsx=..., nbinsy=..., text_auto=..., title=..., template=..., width=..., height=...) -> go.Figure:
    """
    In a density heatmap, rows of `data_frame` are grouped together into
    colored rectangular tiles to visualize the 2D distribution of an
    aggregate function `histfunc` (e.g. the count or sum) of the value `z`.
    """
    ...

def line(data_frame=..., x=..., y=..., line_group=..., color=..., line_dash=..., symbol=..., hover_name=..., hover_data=..., custom_data=..., text=..., facet_row=..., facet_col=..., facet_col_wrap=..., facet_row_spacing=..., facet_col_spacing=..., error_x=..., error_x_minus=..., error_y=..., error_y_minus=..., animation_frame=..., animation_group=..., category_orders=..., labels=..., orientation=..., color_discrete_sequence=..., color_discrete_map=..., line_dash_sequence=..., line_dash_map=..., symbol_sequence=..., symbol_map=..., markers=..., log_x=..., log_y=..., range_x=..., range_y=..., line_shape=..., render_mode=..., title=..., template=..., width=..., height=...) -> go.Figure:
    """
    In a 2D line plot, each row of `data_frame` is represented as vertex of
    a polyline mark in 2D space.
    """
    ...

def area(data_frame=..., x=..., y=..., line_group=..., color=..., pattern_shape=..., symbol=..., hover_name=..., hover_data=..., custom_data=..., text=..., facet_row=..., facet_col=..., facet_col_wrap=..., facet_row_spacing=..., facet_col_spacing=..., animation_frame=..., animation_group=..., category_orders=..., labels=..., color_discrete_sequence=..., color_discrete_map=..., pattern_shape_sequence=..., pattern_shape_map=..., symbol_sequence=..., symbol_map=..., markers=..., orientation=..., groupnorm=..., log_x=..., log_y=..., range_x=..., range_y=..., line_shape=..., title=..., template=..., width=..., height=...) -> go.Figure:
    """
    In a stacked area plot, each row of `data_frame` is represented as
    vertex of a polyline mark in 2D space. The area between successive
    polylines is filled.
    """
    ...

def bar(data_frame=..., x=..., y=..., color=..., pattern_shape=..., facet_row=..., facet_col=..., facet_col_wrap=..., facet_row_spacing=..., facet_col_spacing=..., hover_name=..., hover_data=..., custom_data=..., text=..., base=..., error_x=..., error_x_minus=..., error_y=..., error_y_minus=..., animation_frame=..., animation_group=..., category_orders=..., labels=..., color_discrete_sequence=..., color_discrete_map=..., color_continuous_scale=..., pattern_shape_sequence=..., pattern_shape_map=..., range_color=..., color_continuous_midpoint=..., opacity=..., orientation=..., barmode=..., log_x=..., log_y=..., range_x=..., range_y=..., text_auto=..., title=..., template=..., width=..., height=...) -> go.Figure:
    """
    In a bar plot, each row of `data_frame` is represented as a rectangular
    mark.
    """
    ...

def timeline(data_frame=..., x_start=..., x_end=..., y=..., color=..., pattern_shape=..., facet_row=..., facet_col=..., facet_col_wrap=..., facet_row_spacing=..., facet_col_spacing=..., hover_name=..., hover_data=..., custom_data=..., text=..., animation_frame=..., animation_group=..., category_orders=..., labels=..., color_discrete_sequence=..., color_discrete_map=..., pattern_shape_sequence=..., pattern_shape_map=..., color_continuous_scale=..., range_color=..., color_continuous_midpoint=..., opacity=..., range_x=..., range_y=..., title=..., template=..., width=..., height=...) -> go.Figure:
    """
    In a timeline plot, each row of `data_frame` is represented as a rectangular
    mark on an x axis of type `date`, spanning from `x_start` to `x_end`.
    """
    ...

def histogram(data_frame=..., x=..., y=..., color=..., pattern_shape=..., facet_row=..., facet_col=..., facet_col_wrap=..., facet_row_spacing=..., facet_col_spacing=..., hover_name=..., hover_data=..., animation_frame=..., animation_group=..., category_orders=..., labels=..., color_discrete_sequence=..., color_discrete_map=..., pattern_shape_sequence=..., pattern_shape_map=..., marginal=..., opacity=..., orientation=..., barmode=..., barnorm=..., histnorm=..., log_x=..., log_y=..., range_x=..., range_y=..., histfunc=..., cumulative=..., nbins=..., text_auto=..., title=..., template=..., width=..., height=...) -> go.Figure:
    """
    In a histogram, rows of `data_frame` are grouped together into a
    rectangular mark to visualize the 1D distribution of an aggregate
    function `histfunc` (e.g. the count or sum) of the value `y` (or `x` if
    `orientation` is `'h'`).
    """
    ...

def ecdf(data_frame=..., x=..., y=..., color=..., text=..., line_dash=..., symbol=..., facet_row=..., facet_col=..., facet_col_wrap=..., facet_row_spacing=..., facet_col_spacing=..., hover_name=..., hover_data=..., animation_frame=..., animation_group=..., markers=..., lines=..., category_orders=..., labels=..., color_discrete_sequence=..., color_discrete_map=..., line_dash_sequence=..., line_dash_map=..., symbol_sequence=..., symbol_map=..., marginal=..., opacity=..., orientation=..., ecdfnorm=..., ecdfmode=..., render_mode=..., log_x=..., log_y=..., range_x=..., range_y=..., title=..., template=..., width=..., height=...) -> go.Figure:
    """
    In a Empirical Cumulative Distribution Function (ECDF) plot, rows of `data_frame`
    are sorted by the value `x` (or `y` if `orientation` is `'h'`) and their cumulative
    count (or the cumulative sum of `y` if supplied and `orientation` is `h`) is drawn
    as a line.
    """
    ...

def violin(data_frame=..., x=..., y=..., color=..., facet_row=..., facet_col=..., facet_col_wrap=..., facet_row_spacing=..., facet_col_spacing=..., hover_name=..., hover_data=..., custom_data=..., animation_frame=..., animation_group=..., category_orders=..., labels=..., color_discrete_sequence=..., color_discrete_map=..., orientation=..., violinmode=..., log_x=..., log_y=..., range_x=..., range_y=..., points=..., box=..., title=..., template=..., width=..., height=...) -> go.Figure:
    """
    In a violin plot, rows of `data_frame` are grouped together into a
    curved mark to visualize their distribution.
    """
    ...

def box(data_frame=..., x=..., y=..., color=..., facet_row=..., facet_col=..., facet_col_wrap=..., facet_row_spacing=..., facet_col_spacing=..., hover_name=..., hover_data=..., custom_data=..., animation_frame=..., animation_group=..., category_orders=..., labels=..., color_discrete_sequence=..., color_discrete_map=..., orientation=..., boxmode=..., log_x=..., log_y=..., range_x=..., range_y=..., points=..., notched=..., title=..., template=..., width=..., height=...) -> go.Figure:
    """
    In a box plot, rows of `data_frame` are grouped together into a
    box-and-whisker mark to visualize their distribution.

    Each box spans from quartile 1 (Q1) to quartile 3 (Q3). The second
    quartile (Q2) is marked by a line inside the box. By default, the
    whiskers correspond to the box' edges +/- 1.5 times the interquartile
    range (IQR: Q3-Q1), see "points" for other options.
    """
    ...

def strip(data_frame=..., x=..., y=..., color=..., facet_row=..., facet_col=..., facet_col_wrap=..., facet_row_spacing=..., facet_col_spacing=..., hover_name=..., hover_data=..., custom_data=..., animation_frame=..., animation_group=..., category_orders=..., labels=..., color_discrete_sequence=..., color_discrete_map=..., orientation=..., stripmode=..., log_x=..., log_y=..., range_x=..., range_y=..., title=..., template=..., width=..., height=...) -> go.Figure:
    """
    In a strip plot each row of `data_frame` is represented as a jittered
    mark within categories.
    """
    ...

def scatter_3d(data_frame=..., x=..., y=..., z=..., color=..., symbol=..., size=..., text=..., hover_name=..., hover_data=..., custom_data=..., error_x=..., error_x_minus=..., error_y=..., error_y_minus=..., error_z=..., error_z_minus=..., animation_frame=..., animation_group=..., category_orders=..., labels=..., size_max=..., color_discrete_sequence=..., color_discrete_map=..., color_continuous_scale=..., range_color=..., color_continuous_midpoint=..., symbol_sequence=..., symbol_map=..., opacity=..., log_x=..., log_y=..., log_z=..., range_x=..., range_y=..., range_z=..., title=..., template=..., width=..., height=...) -> go.Figure:
    """
    In a 3D scatter plot, each row of `data_frame` is represented by a
    symbol mark in 3D space.
    """
    ...

def line_3d(data_frame=..., x=..., y=..., z=..., color=..., line_dash=..., text=..., line_group=..., symbol=..., hover_name=..., hover_data=..., custom_data=..., error_x=..., error_x_minus=..., error_y=..., error_y_minus=..., error_z=..., error_z_minus=..., animation_frame=..., animation_group=..., category_orders=..., labels=..., color_discrete_sequence=..., color_discrete_map=..., line_dash_sequence=..., line_dash_map=..., symbol_sequence=..., symbol_map=..., markers=..., log_x=..., log_y=..., log_z=..., range_x=..., range_y=..., range_z=..., title=..., template=..., width=..., height=...) -> go.Figure:
    """
    In a 3D line plot, each row of `data_frame` is represented as vertex of
    a polyline mark in 3D space.
    """
    ...

def scatter_ternary(data_frame=..., a=..., b=..., c=..., color=..., symbol=..., size=..., text=..., hover_name=..., hover_data=..., custom_data=..., animation_frame=..., animation_group=..., category_orders=..., labels=..., color_discrete_sequence=..., color_discrete_map=..., color_continuous_scale=..., range_color=..., color_continuous_midpoint=..., symbol_sequence=..., symbol_map=..., opacity=..., size_max=..., title=..., template=..., width=..., height=...) -> go.Figure:
    """
    In a ternary scatter plot, each row of `data_frame` is represented by a
    symbol mark in ternary coordinates.
    """
    ...

def line_ternary(data_frame=..., a=..., b=..., c=..., color=..., line_dash=..., line_group=..., symbol=..., hover_name=..., hover_data=..., custom_data=..., text=..., animation_frame=..., animation_group=..., category_orders=..., labels=..., color_discrete_sequence=..., color_discrete_map=..., line_dash_sequence=..., line_dash_map=..., symbol_sequence=..., symbol_map=..., markers=..., line_shape=..., title=..., template=..., width=..., height=...) -> go.Figure:
    """
    In a ternary line plot, each row of `data_frame` is represented as
    vertex of a polyline mark in ternary coordinates.
    """
    ...

def scatter_polar(data_frame=..., r=..., theta=..., color=..., symbol=..., size=..., hover_name=..., hover_data=..., custom_data=..., text=..., animation_frame=..., animation_group=..., category_orders=..., labels=..., color_discrete_sequence=..., color_discrete_map=..., color_continuous_scale=..., range_color=..., color_continuous_midpoint=..., symbol_sequence=..., symbol_map=..., opacity=..., direction=..., start_angle=..., size_max=..., range_r=..., range_theta=..., log_r=..., render_mode=..., title=..., template=..., width=..., height=...) -> go.Figure:
    """
    In a polar scatter plot, each row of `data_frame` is represented by a
    symbol mark in polar coordinates.
    """
    ...

def line_polar(data_frame=..., r=..., theta=..., color=..., line_dash=..., hover_name=..., hover_data=..., custom_data=..., line_group=..., text=..., symbol=..., animation_frame=..., animation_group=..., category_orders=..., labels=..., color_discrete_sequence=..., color_discrete_map=..., line_dash_sequence=..., line_dash_map=..., symbol_sequence=..., symbol_map=..., markers=..., direction=..., start_angle=..., line_close=..., line_shape=..., render_mode=..., range_r=..., range_theta=..., log_r=..., title=..., template=..., width=..., height=...) -> go.Figure:
    """
    In a polar line plot, each row of `data_frame` is represented as vertex
    of a polyline mark in polar coordinates.
    """
    ...

def bar_polar(data_frame=..., r=..., theta=..., color=..., pattern_shape=..., hover_name=..., hover_data=..., custom_data=..., base=..., animation_frame=..., animation_group=..., category_orders=..., labels=..., color_discrete_sequence=..., color_discrete_map=..., color_continuous_scale=..., pattern_shape_sequence=..., pattern_shape_map=..., range_color=..., color_continuous_midpoint=..., barnorm=..., barmode=..., direction=..., start_angle=..., range_r=..., range_theta=..., log_r=..., title=..., template=..., width=..., height=...) -> go.Figure:
    """
    In a polar bar plot, each row of `data_frame` is represented as a wedge
    mark in polar coordinates.
    """
    ...

def choropleth(data_frame=..., lat=..., lon=..., locations=..., locationmode=..., geojson=..., featureidkey=..., color=..., facet_row=..., facet_col=..., facet_col_wrap=..., facet_row_spacing=..., facet_col_spacing=..., hover_name=..., hover_data=..., custom_data=..., animation_frame=..., animation_group=..., category_orders=..., labels=..., color_discrete_sequence=..., color_discrete_map=..., color_continuous_scale=..., range_color=..., color_continuous_midpoint=..., projection=..., scope=..., center=..., fitbounds=..., basemap_visible=..., title=..., template=..., width=..., height=...) -> go.Figure:
    """
    In a choropleth map, each row of `data_frame` is represented by a
    colored region mark on a map.
    """
    ...

def scatter_geo(data_frame=..., lat=..., lon=..., locations=..., locationmode=..., geojson=..., featureidkey=..., color=..., text=..., symbol=..., facet_row=..., facet_col=..., facet_col_wrap=..., facet_row_spacing=..., facet_col_spacing=..., hover_name=..., hover_data=..., custom_data=..., size=..., animation_frame=..., animation_group=..., category_orders=..., labels=..., color_discrete_sequence=..., color_discrete_map=..., color_continuous_scale=..., range_color=..., color_continuous_midpoint=..., symbol_sequence=..., symbol_map=..., opacity=..., size_max=..., projection=..., scope=..., center=..., fitbounds=..., basemap_visible=..., title=..., template=..., width=..., height=...) -> go.Figure:
    """
    In a geographic scatter plot, each row of `data_frame` is represented
    by a symbol mark on a map.
    """
    ...

def line_geo(data_frame=..., lat=..., lon=..., locations=..., locationmode=..., geojson=..., featureidkey=..., color=..., line_dash=..., text=..., facet_row=..., facet_col=..., facet_col_wrap=..., facet_row_spacing=..., facet_col_spacing=..., hover_name=..., hover_data=..., custom_data=..., line_group=..., symbol=..., animation_frame=..., animation_group=..., category_orders=..., labels=..., color_discrete_sequence=..., color_discrete_map=..., line_dash_sequence=..., line_dash_map=..., symbol_sequence=..., symbol_map=..., markers=..., projection=..., scope=..., center=..., fitbounds=..., basemap_visible=..., title=..., template=..., width=..., height=...) -> go.Figure:
    """
    In a geographic line plot, each row of `data_frame` is represented as
    vertex of a polyline mark on a map.
    """
    ...

def scatter_mapbox(data_frame=..., lat=..., lon=..., color=..., text=..., hover_name=..., hover_data=..., custom_data=..., size=..., animation_frame=..., animation_group=..., category_orders=..., labels=..., color_discrete_sequence=..., color_discrete_map=..., color_continuous_scale=..., range_color=..., color_continuous_midpoint=..., opacity=..., size_max=..., zoom=..., center=..., mapbox_style=..., title=..., template=..., width=..., height=...) -> go.Figure:
    """
    In a Mapbox scatter plot, each row of `data_frame` is represented by a
    symbol mark on a Mapbox map.
    """
    ...

def choropleth_mapbox(data_frame=..., geojson=..., featureidkey=..., locations=..., color=..., hover_name=..., hover_data=..., custom_data=..., animation_frame=..., animation_group=..., category_orders=..., labels=..., color_discrete_sequence=..., color_discrete_map=..., color_continuous_scale=..., range_color=..., color_continuous_midpoint=..., opacity=..., zoom=..., center=..., mapbox_style=..., title=..., template=..., width=..., height=...) -> go.Figure:
    """
    In a Mapbox choropleth map, each row of `data_frame` is represented by a
    colored region on a Mapbox map.
    """
    ...

def density_mapbox(data_frame=..., lat=..., lon=..., z=..., hover_name=..., hover_data=..., custom_data=..., animation_frame=..., animation_group=..., category_orders=..., labels=..., color_continuous_scale=..., range_color=..., color_continuous_midpoint=..., opacity=..., zoom=..., center=..., mapbox_style=..., radius=..., title=..., template=..., width=..., height=...) -> go.Figure:
    """
    In a Mapbox density map, each row of `data_frame` contributes to the intensity of
    the color of the region around the corresponding point on the map
    """
    ...

def line_mapbox(data_frame=..., lat=..., lon=..., color=..., text=..., hover_name=..., hover_data=..., custom_data=..., line_group=..., animation_frame=..., animation_group=..., category_orders=..., labels=..., color_discrete_sequence=..., color_discrete_map=..., zoom=..., center=..., mapbox_style=..., title=..., template=..., width=..., height=...) -> go.Figure:
    """
    In a Mapbox line plot, each row of `data_frame` is represented as
    vertex of a polyline mark on a Mapbox map.
    """
    ...

def scatter_matrix(data_frame=..., dimensions=..., color=..., symbol=..., size=..., hover_name=..., hover_data=..., custom_data=..., category_orders=..., labels=..., color_discrete_sequence=..., color_discrete_map=..., color_continuous_scale=..., range_color=..., color_continuous_midpoint=..., symbol_sequence=..., symbol_map=..., opacity=..., size_max=..., title=..., template=..., width=..., height=...) -> go.Figure:
    """
    In a scatter plot matrix (or SPLOM), each row of `data_frame` is
    represented by a multiple symbol marks, one in each cell of a grid of
    2D scatter plots, which plot each pair of `dimensions` against each
    other.
    """
    ...

def parallel_coordinates(data_frame=..., dimensions=..., color=..., labels=..., color_continuous_scale=..., range_color=..., color_continuous_midpoint=..., title=..., template=..., width=..., height=...) -> go.Figure:
    """
    In a parallel coordinates plot, each row of `data_frame` is represented
    by a polyline mark which traverses a set of parallel axes, one for each
    of the `dimensions`.
    """
    ...

def parallel_categories(data_frame=..., dimensions=..., color=..., labels=..., color_continuous_scale=..., range_color=..., color_continuous_midpoint=..., title=..., template=..., width=..., height=..., dimensions_max_cardinality=...) -> go.Figure:
    """
    In a parallel categories (or parallel sets) plot, each row of
    `data_frame` is grouped with other rows that share the same values of
    `dimensions` and then plotted as a polyline mark through a set of
    parallel axes, one for each of the `dimensions`.
    """
    ...

def pie(data_frame=..., names=..., values=..., color=..., facet_row=..., facet_col=..., facet_col_wrap=..., facet_row_spacing=..., facet_col_spacing=..., color_discrete_sequence=..., color_discrete_map=..., hover_name=..., hover_data=..., custom_data=..., category_orders=..., labels=..., title=..., template=..., width=..., height=..., opacity=..., hole=...) -> go.Figure:
    """
    In a pie plot, each row of `data_frame` is represented as a sector of a
    pie.
    """
    ...

def sunburst(data_frame=..., names=..., values=..., parents=..., path=..., ids=..., color=..., color_continuous_scale=..., range_color=..., color_continuous_midpoint=..., color_discrete_sequence=..., color_discrete_map=..., hover_name=..., hover_data=..., custom_data=..., labels=..., title=..., template=..., width=..., height=..., branchvalues=..., maxdepth=...) -> go.Figure:
    """
    A sunburst plot represents hierarchial data as sectors laid out over
    several levels of concentric rings.
    """
    ...

def treemap(data_frame=..., names=..., values=..., parents=..., ids=..., path=..., color=..., color_continuous_scale=..., range_color=..., color_continuous_midpoint=..., color_discrete_sequence=..., color_discrete_map=..., hover_name=..., hover_data=..., custom_data=..., labels=..., title=..., template=..., width=..., height=..., branchvalues=..., maxdepth=...) -> go.Figure:
    """
    A treemap plot represents hierarchial data as nested rectangular
    sectors.
    """
    ...

def icicle(data_frame=..., names=..., values=..., parents=..., path=..., ids=..., color=..., color_continuous_scale=..., range_color=..., color_continuous_midpoint=..., color_discrete_sequence=..., color_discrete_map=..., hover_name=..., hover_data=..., custom_data=..., labels=..., title=..., template=..., width=..., height=..., branchvalues=..., maxdepth=...) -> go.Figure:
    """
    An icicle plot represents hierarchial data with adjoined rectangular
    sectors that all cascade from root down to leaf in one direction.
    """
    ...

def funnel(data_frame=..., x=..., y=..., color=..., facet_row=..., facet_col=..., facet_col_wrap=..., facet_row_spacing=..., facet_col_spacing=..., hover_name=..., hover_data=..., custom_data=..., text=..., animation_frame=..., animation_group=..., category_orders=..., labels=..., color_discrete_sequence=..., color_discrete_map=..., opacity=..., orientation=..., log_x=..., log_y=..., range_x=..., range_y=..., title=..., template=..., width=..., height=...) -> go.Figure:
    """
    In a funnel plot, each row of `data_frame` is represented as a
    rectangular sector of a funnel.
    """
    ...

def funnel_area(data_frame=..., names=..., values=..., color=..., color_discrete_sequence=..., color_discrete_map=..., hover_name=..., hover_data=..., custom_data=..., labels=..., title=..., template=..., width=..., height=..., opacity=...) -> go.Figure:
    """
    In a funnel area plot, each row of `data_frame` is represented as a
    trapezoidal sector of a funnel.
    """
    ...

