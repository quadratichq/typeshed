"""
This type stub file was generated by pyright.
"""

from plotly.basedatatypes import BaseTraceHierarchyType as _BaseTraceHierarchyType

class Lighting(_BaseTraceHierarchyType):
    _parent_path_str = ...
    _path_str = ...
    _valid_props = ...
    @property
    def ambient(self): # -> tuple[Any, ...] | Self | None:
        """
        Ambient light increases overall color visibility but can wash
        out the image.

        The 'ambient' property is a number and may be specified as:
          - An int or float in the interval [0, 1]

        Returns
        -------
        int|float
        """
        ...
    
    @ambient.setter
    def ambient(self, val): # -> None:
        ...
    
    @property
    def diffuse(self): # -> tuple[Any, ...] | Self | None:
        """
        Represents the extent that incident rays are reflected in a
        range of angles.

        The 'diffuse' property is a number and may be specified as:
          - An int or float in the interval [0, 1]

        Returns
        -------
        int|float
        """
        ...
    
    @diffuse.setter
    def diffuse(self, val): # -> None:
        ...
    
    @property
    def fresnel(self): # -> tuple[Any, ...] | Self | None:
        """
        Represents the reflectance as a dependency of the viewing
        angle; e.g. paper is reflective when viewing it from the edge
        of the paper (almost 90 degrees), causing shine.

        The 'fresnel' property is a number and may be specified as:
          - An int or float in the interval [0, 5]

        Returns
        -------
        int|float
        """
        ...
    
    @fresnel.setter
    def fresnel(self, val): # -> None:
        ...
    
    @property
    def roughness(self): # -> tuple[Any, ...] | Self | None:
        """
        Alters specular reflection; the rougher the surface, the wider
        and less contrasty the shine.

        The 'roughness' property is a number and may be specified as:
          - An int or float in the interval [0, 1]

        Returns
        -------
        int|float
        """
        ...
    
    @roughness.setter
    def roughness(self, val): # -> None:
        ...
    
    @property
    def specular(self): # -> tuple[Any, ...] | Self | None:
        """
        Represents the level that incident rays are reflected in a
        single direction, causing shine.

        The 'specular' property is a number and may be specified as:
          - An int or float in the interval [0, 2]

        Returns
        -------
        int|float
        """
        ...
    
    @specular.setter
    def specular(self, val): # -> None:
        ...
    
    def __init__(self, arg=..., ambient=..., diffuse=..., fresnel=..., roughness=..., specular=..., **kwargs) -> None:
        """
        Construct a new Lighting object

        Parameters
        ----------
        arg
            dict of properties compatible with this constructor or
            an instance of
            :class:`plotly.graph_objs.surface.Lighting`
        ambient
            Ambient light increases overall color visibility but
            can wash out the image.
        diffuse
            Represents the extent that incident rays are reflected
            in a range of angles.
        fresnel
            Represents the reflectance as a dependency of the
            viewing angle; e.g. paper is reflective when viewing it
            from the edge of the paper (almost 90 degrees), causing
            shine.
        roughness
            Alters specular reflection; the rougher the surface,
            the wider and less contrasty the shine.
        specular
            Represents the level that incident rays are reflected
            in a single direction, causing shine.

        Returns
        -------
        Lighting
        """
        ...
    


