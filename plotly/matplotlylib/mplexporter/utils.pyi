"""
This type stub file was generated by pyright.
"""

"""
Utility Routines for Working with Matplotlib Objects
====================================================
"""
def export_color(color): # -> str:
    """Convert matplotlib color code to hex color or RGBA color"""
    ...

LINESTYLES = ...
def get_dasharray(obj): # -> str:
    """Get an SVG dash array for the given matplotlib linestyle

    Parameters
    ----------
    obj : matplotlib object
        The matplotlib line or path object, which must have a get_linestyle()
        method which returns a valid matplotlib line code

    Returns
    -------
    dasharray : string
        The HTML/SVG dasharray code associated with the object.
    """
    ...

PATH_DICT = ...
def SVG_path(path, transform=..., simplify=...): # -> tuple[NDArray[float64], list[Any]] | tuple[ndarray[Any, dtype[Any]], list[Any]]:
    """Construct the vertices and SVG codes for the path

    Parameters
    ----------
    path : matplotlib.Path object

    transform : matplotlib transform (optional)
        if specified, the path will be transformed before computing the output.

    Returns
    -------
    vertices : array
        The shape (M, 2) array of vertices of the Path. Note that some Path
        codes require multiple vertices, so the length of these vertices may
        be longer than the list of path codes.
    path_codes : list
        A length N list of single-character path codes, N <= M. Each code is
        a single character, in ['L','M','S','C','Z']. See the standard SVG
        path specification for a description of these.
    """
    ...

def get_path_style(path, fill=...): # -> dict[Any, Any]:
    """Get the style dictionary for matplotlib path objects"""
    ...

def get_line_style(line): # -> dict[Any, Any]:
    """Get the style dictionary for matplotlib line objects"""
    ...

def get_marker_style(line): # -> dict[Any, Any]:
    """Get the style dictionary for matplotlib marker objects"""
    ...

def get_text_style(text): # -> dict[Any, Any]:
    """Return the text style dict for a text instance"""
    ...

def get_axis_properties(axis): # -> dict[Any, Any]:
    """Return the property dictionary for a matplotlib.Axis instance"""
    ...

def get_grid_style(axis): # -> dict[str, bool | str] | dict[str, bool]:
    ...

def get_figure_properties(fig): # -> dict[str, Any]:
    ...

def get_axes_properties(ax): # -> dict[str, Any]:
    ...

def iter_all_children(obj, skipContainers=...): # -> Generator[Any, Any, None]:
    """
    Returns an iterator over all childen and nested children using
    obj's get_children() method

    if skipContainers is true, only childless objects are returned.
    """
    ...

def get_legend_properties(ax, legend): # -> dict[str, Any]:
    ...

def image_to_base64(image): # -> str:
    """
    Convert a matplotlib image to a base64 png representation

    Parameters
    ----------
    image : matplotlib image object
        The image to be converted.

    Returns
    -------
    image_base64 : string
        The UTF8-encoded base64 string representation of the png image.
    """
    ...

